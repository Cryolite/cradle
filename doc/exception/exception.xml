<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/1.1/boostbook.dtd">
<library name="Exception" dirname="exception" xmlns:xi="http://www.w3.org/2001/XInclude" 
         id="exception" last-revision="2013-04-03">
  <libraryinfo>
    <author>
      <personname>
        <firstname>Cryolite</firstname>
      </personname>
    </author>
    <copyright>
      <year>2013</year>
      <holder>Cryolite</holder>
    </copyright>
    <legalnotice>
      <para>
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file <filename>LICENSE_1_0.txt</filename> or copy at
        <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>
    <librarypurpose>Library manuplating exceptions</librarypurpose>
    <librarycategory>Language Features Emulation</librarycategory>
  </libraryinfo>

  <title>Cradle.Exception</title>

  <library-reference>
    <header name="cradle/exception/uncaught_exception.hpp">
      <namespace name="cradle">
        <namespace name="exceptions">
          <function name="get_num_uncaught_exceptions">
            <type>std::size_t</type>
            <purpose>
              <simpara>
                Returns the number of uncaught exceptions.
              </simpara>
            </purpose>
            <description>
              <para>
                <termdef>
                  In this description, <replaceable>X</replaceable> and <replaceable>Y</replaceable> denote evaluations<footnote>
                    <simpara>
                      Defined in [intro.execution]/12, <citetitle pubwork="book">ISO/IEC 14882:2011</citetitle>.
                    </simpara>
                  </footnote>. <replaceable>Y</replaceable> is said to be a <firstterm>direct predecessor</firstterm> of <replaceable>X</replaceable> if
                  <replaceable>Y</replaceable> is sequenced before<footnote>
                    <simpara>
                      Defined in [intro.execution]/13, <citetitle pubwork="book">ISO/IEC 14882:2011</citetitle>.
                    </simpara>
                  </footnote> <replaceable>X</replaceable> and there is no other evaluation <replaceable>Z</replaceable> such that <replaceable>Z</replaceable> is sequenced before
                  <replaceable>X</replaceable> and <replaceable>Y</replaceable> is sequenced before <replaceable>Z</replaceable>.
                </termdef>
              </para>
              <para>
                <termdef>
                  The <firstterm>number of uncaught exceptions</firstterm> is a natural number defined for every evaluation in a well-formed program<footnote>
                    <simpara>
                      Defined in [defns.well.formed], <citetitle pubwork="book">ISO/IEC 14882:2011</citetitle>.
                    </simpara>
                  </footnote>. The number of uncaught exceptions of an evaluation is defined as follows;
                  <itemizedlist>
                    <listitem>
                      <inlineequation>0</inlineequation> if the evaluation does not have any direct predecessor, otherwise
                    </listitem>
                    <listitem>
                      <inlineequation>n + 1</inlineequation> if one of the direct predecessors of the evaluation is an evaluation of a
                      <replaceable>throw-expression</replaceable><footnote>
                        <simpara>
                          Defined in [except.throw], <citetitle pubwork="book">ISO/IEC 14882:2011</citetitle>.
                        </simpara>
                      </footnote> and the number of uncaught exceptions for the direct predecessor is <inlineequation>n</inlineequation>, otherwise
                    </listitem>
                    <listitem>
                      <inlineequation>n - 1</inlineequation> if the evaluation is of an expression in the <replaceable>compound-statement</replaceable> of a
                      <replaceable>handler</replaceable><footnote>
                        <simpara>
                          Defined in [except]/1 and [except.handle]/1, <citetitle pubwork="book">ISO/IEC 14882:2011</citetitle>.
                        </simpara>
                      </footnote> and one of the direct predecessors of the evauation is not an evaluation of an expression in the same
                      <replaceable>compound-statement</replaceable> and the number of uncaught exceptions for the direct predecessor is <inlineequation>n</inlineequation>.
                    </listitem>
                  </itemizedlist>
                </termdef>
                <footnote>
                  <simpara>
                    It cannot happen that the numbers of uncaught exceptions are different among the direct predecessors of an evaluation in any well-defined program.
                  </simpara>
                </footnote>
              </para>
            </description>
            <returns>
              <simpara>The number of uncaught exceptions.</simpara>
            </returns>
            <throws>
              <simpara>
                Nothing.
              </simpara>
            </throws>
            <complexity>
              <simpara>
                Constant.
              </simpara>
            </complexity>
            <notes>
              <simpara>
                Guarantees strong thread-safety.
              </simpara>
            </notes>
          </function>
        </namespace>
      </namespace>
    </header>
  </library-reference>
</library>
