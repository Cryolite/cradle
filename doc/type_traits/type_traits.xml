<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/1.1/boostbook.dtd">
<library name="TypeTraits" dirname="type_traits" xmlns:xi="http://www.w3.org/2001/XInclude" 
         id="type_traits" last-revision="2013-04-04">
  <libraryinfo>
    <author>
      <personname>
        <firstname>Cryolite</firstname>
      </personname>
    </author>
    <copyright>
      <year>2013</year>
      <holder>Cryolite</holder>
    </copyright>
    <legalnotice>
      <para>
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file <filename>LICENSE_1_0.txt</filename> or copy at
        <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>
    <librarypurpose>Supplement for &lt;type_traits&gt; and Boost.TypeTraits</librarypurpose>
    <librarycategory>Templace Metaprogramming</librarycategory>
  </libraryinfo>

  <title>Cradle.TypeTraits</title>

  <library-reference>
    <header name="cradle/type_traits/is_decayed.hpp">
      <namespace name="cradle">
        <struct name="is_decayed">
          <template>
            <template-type-parameter name="T"/>
          </template>
          <purpose>
            <simpara> 
              A metafunction that checks whether a type is decayed.
            </simpara>
          </purpose>
          <description>
            <sect5>
              <title>Model of</title>
              <simpara>
                <ulink url="http://www.boost.org/libs/mpl/doc/refmanual/metafunctions.html">Metafunction</ulink>.
              </simpara>
            </sect5>
            <sect5>
              <title>Valid syntaxes</title>
              <para>
                In this description, <code>X</code> denotes a type.
              </para>
              <itemizedlist>
                <listitem>
                  <variablelist>
                    <programlisting>typename is_plain&lt;X&gt;::type</programlisting>
                    <varlistentry>
                      <term>Category</term>
                      <listitem>
                        <simpara>
                          Type.
                        </simpara>
                      </listitem>
                    </varlistentry>
                    <varlistentry>
                      <term>Concept</term>
                      <listitem>
                        <simpara>
                          <ulink url="http://www.boost.org/libs/mpl/doc/refmanual/integral-constant.html">Integral Constant</ulink>.
                        </simpara>
                      </listitem>
                    </varlistentry>
                    <varlistentry>
                      <term>Type</term>
                      <listitem>
                        <para>
                          Equivalent to
                          <programlisting>boost::mpl::bool_&lt;std::is_same&lt;typename std::decay&lt;X&gt;::type, X&gt;::value&gt;</programlisting>
                        </para>
                      </listitem>
                    </varlistentry>
                    <varlistentry>
                      <term>Complexity</term>
                      <listitem>
                        <simpara>
                          Constant in compile-time.
                        </simpara>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </listitem>
              </itemizedlist>
            </sect5>
          </description>
          <typedef name="type">
            <type><replaceable>unspecified</replaceable></type>
          </typedef>
        </struct>
      </namespace>
    </header>
  </library-reference>
</library>
