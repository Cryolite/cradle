if "$(CRADLE_WITH_INTRO)" {
  project cradle/test
    : default-build
      <memory-checker>on
      <libstdc++-debug-mode>on
      <catchsegv>on
      <cradle-checking>on
      <source>/cradle/ext/boost//headers_compile
      <source>/cradle/ext/boost//unit_test_framework_compile
      <library>/cradle/ext/boost//headers_link
      <library>/cradle/ext/boost//unit_test_framework_link
    ;
}
else {
  project cradle/test
    : default-build
      #<toolset>gcc:<define>_GLIBCXX_DEBUG
      #<toolset>gcc:<define>_GLIBCXX_DEBUG_PEDANTIC
      #<toolset>clang:<define>_GLIBCXX_DEBUG
      #<toolset>clang:<define>_GLIBCXX_DEBUG_PEDANTIC
      #<toolset>intel:<define>_GLIBCXX_DEBUG
      #<toolset>intel:<define>_GLIBCXX_DEBUG_PEDANTIC
      #<toolset>clang:<cflags>-fsanitize=address
      <cradle-checking>on
      <source>/cradle/ext/boost//headers_compile
      <source>/cradle/ext/boost//unit_test_framework_compile
      <library>/cradle/ext/boost//headers_link
      <library>/cradle/ext/boost//unit_test_framework_link
    ;
}

import regex ;
import path ;

local .here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;

local .direct-subdirs ;
for local i in [ path.glob "$(.here)" : * ] {
  if [ path.exists "$(i)/jamfile" ] {
    .direct-subdirs += "$(i:B)" ;
  }
}

alias tests
  : "$(.direct-subdirs)//tests"
  ;
